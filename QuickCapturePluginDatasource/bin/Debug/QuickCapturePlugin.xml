<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickCapturePlugin</name>
    </assembly>
    <members>
        <member name="T:QuickCapturePlugin.ProPluginCursorTemplate">
            <summary>
            Implements a plugin cursor
            </summary>
            <remarks>Cursors are forward only. It is the cursor's responsibility
            to maintain its current state (i.e. which record is current, how many
            records left to enumerate, etc, etc)</remarks>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginCursorTemplate.GetCurrentRow">
            <summary>
            Get the current row
            </summary>
            <returns><see cref="T:ArcGIS.Core.Data.PluginDatastore.PluginRow"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginCursorTemplate.MoveNext">
            <summary>
            Advance the cursor to the next row
            </summary>
            <returns>True if there was another row</returns>
        </member>
        <member name="T:QuickCapturePlugin.ProPluginDatasourceTemplate">
            <summary>
            Implements a custom plugin datasource for reading Sqlite database tables and feature classes
            </summary>
            <remarks>A per thread instance will be created (as needed) by Pro.</remarks>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginDatasourceTemplate.TableNameFromFeatSvcURL(System.String)">
            <summary>
            Constructs a virtual table name from the feature service URL these features were stored in.
            </summary>
            <param name="sLyrUrl">The feature service URL</param>
            <returns>Name of the virtual layer for these features</returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginDatasourceTemplate.Open(System.Uri)">
            <summary>
            Open the specified workspace (database)
            </summary>
            <param name="connectionPath">The path to the database file</param>
            <remarks>
            .NET Clients access Open via the ArcGIS.Core.Data.PluginDatastore.PluginDatastore class
            whereas Native clients (Pro internals) access via IWorkspaceFactory</remarks>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginDatasourceTemplate.OpenTable(System.String)">
            <summary>
            Open the specified table
            </summary>
            <param name="name">The name of the table to open</param>
            <returns><see cref="T:ArcGIS.Core.Data.PluginDatastore.PluginTableTemplate"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginDatasourceTemplate.GetTableNames">
            <summary>
            Get the table names available in the workspace
            </summary>
            <returns><see cref="!:IReadOnlyList&lt;string&gt;"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginDatasourceTemplate.IsQueryLanguageSupported">
            <summary>
            Returns whether or not SQL queries are supported on the plugin
            </summary>
            <remarks>Returning false (default) means that the WhereClause of an
            incoming query filter will always be empty (regardless of what clients
            set it to)</remarks>
            <returns>true or false</returns>
        </member>
        <member name="T:QuickCapturePlugin.IPluginRowProvider">
            <summary>
            (Custom) interface the sample uses to extract row information from the
            plugin table
            </summary>
        </member>
        <member name="T:QuickCapturePlugin.ProPluginTableTemplate">
            <summary>
            Implements a plugin table.
            </summary>
            <remarks>The plugin table appears as an ArcGIS.Core.Data.Table or FeatureClass to
            .NET clients (add-ins) and as an ITable or IFeatureClass to native clients (i.e. Pro)
            </remarks>
        </member>
        <member name="F:QuickCapturePlugin.ProPluginTableTemplate._featSvcUrl">
            <summary>
            This plugin table represents all features that failed to get stored into a particular feature service
            </summary>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetName">
            <summary>
            Get the name of the table
            </summary>
            <returns>Table name</returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.IsNativeRowCountSupported">
            <summary>
            Gets whether native row count is supported
            </summary>
            <remarks>Return true if your table can get the row count without having
            to enumerate through all the rows (and count them)....which will be
            the default behavior if you return false</remarks>
            <returns>True or false</returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetNativeRowCount">
            <summary>
            Gets the native row count (if IsNativeRowCountSupported is true)
            </summary>
            <returns>The row count</returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.Search(ArcGIS.Core.Data.QueryFilter)">
            <summary>
            Search the underlying plugin table using the input QueryFilter
            </summary>
            <param name="queryFilter"></param>
            <remarks>If the PluginDatasourceTemplate.IsQueryLanguageSupported returns
            false, the WhereClause will always be empty.<br/>
            The QueryFilter is never null (even if the client passed in null to the "outside"
            table or feature class).<br/>
            A FID set in the ObjectIDs collection of the query filter, if present, acts as
            the "super" set - or constraint - from which all selections should be made. 
            In other words, if the FID set contains ids {1,5,6,10} then a WhereClause
            on the query filter can only select from {1,5,6,10} and not from any other
            records.</remarks>
            <returns><see cref="T:ArcGIS.Core.Data.PluginDatastore.PluginCursorTemplate"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.Search(ArcGIS.Core.Data.SpatialQueryFilter)">
            <summary>
            Search the underlying plugin table using the input SpatialQueryFilter
            </summary>
            <remarks>A SpatialQueryFilter cann only be used by clients if the plugin
            table returns a GeometryType other than Unknown from GetShapeType().</remarks>
            <param name="spatialQueryFilter"></param>
            <returns><see cref="T:ArcGIS.Core.Data.PluginDatastore.PluginCursorTemplate"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetShapeType">
            <summary>
            Gets the supported GeometryType if there is one, otherwise Unknown
            </summary>
            <remarks>Plugins returning a geometry type get a FeatureClass (which is also a Table) wrapper 
            and can be used as data sources for layers. Plugins returning a geometry type of Unknown
            get a Table wrapper and can be used as data sources for StandAloneTables only.</remarks>
            <returns></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetExtent">
            <summary>
            Get the extent for the dataset (if it has one)
            </summary>
            <remarks>Ideally, your plugin table should return an extent even if it is
            empty</remarks>
            <returns><see cref="T:ArcGIS.Core.Geometry.Envelope"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetFields">
            <summary>
            Get the collection of fields accessible on the plugin table
            </summary>
            <remarks>The order of returned columns in any rows must match the
            order of the fields specified from GetFields()</remarks>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyList`1"/></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.FindRow(System.Int32,System.Collections.Generic.IEnumerable{System.String},ArcGIS.Core.Geometry.SpatialReference)">
            <summary>
            Custom interface specific to the way the sample is implemented.
            </summary>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.CleanFieldName(System.String)">
            <summary>
            Change a JSON attribute name to conform to ArcGIS field-naming restrictions
            </summary>
            <param name="sTableName"></param>
            <returns></returns>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.GetGeometryTypeInfo(System.String,System.String)">
            <summary>
            Get basic information about the kind of geometry in this table
            </summary>
            <param name="sFeatId">The FeatureID value from SQLite</param>
            <param name="sGeom">Geometry JSON from "Feature" field</param>
        </member>
        <member name="M:QuickCapturePlugin.ProPluginTableTemplate.ExecuteQuery(ArcGIS.Core.Data.QueryFilter)">
            <summary>
            Implement querying with a query filter
            </summary>
            <param name="qf"></param>
            <returns></returns>
        </member>
    </members>
</doc>
